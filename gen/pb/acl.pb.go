// Code generated by protoc-gen-gogo.
// source: acl.proto
// DO NOT EDIT!

/*
Package aclpb is a generated protocol buffer package.

It is generated from these files:
	acl.proto

It has these top-level messages:
	HasPermRequest
	HasPermResponse
*/
package aclpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type HasPermRequest struct {
	Service  string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Resource string `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
}

func (m *HasPermRequest) Reset()                    { *m = HasPermRequest{} }
func (m *HasPermRequest) String() string            { return proto.CompactTextString(m) }
func (*HasPermRequest) ProtoMessage()               {}
func (*HasPermRequest) Descriptor() ([]byte, []int) { return fileDescriptorAcl, []int{0} }

func (m *HasPermRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *HasPermRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HasPermRequest) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

type HasPermResponse struct {
	HasPerm bool   `protobuf:"varint,1,opt,name=has_perm,json=hasPerm,proto3" json:"has_perm,omitempty"`
	ErrMsg  string `protobuf:"bytes,2,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
}

func (m *HasPermResponse) Reset()                    { *m = HasPermResponse{} }
func (m *HasPermResponse) String() string            { return proto.CompactTextString(m) }
func (*HasPermResponse) ProtoMessage()               {}
func (*HasPermResponse) Descriptor() ([]byte, []int) { return fileDescriptorAcl, []int{1} }

func (m *HasPermResponse) GetHasPerm() bool {
	if m != nil {
		return m.HasPerm
	}
	return false
}

func (m *HasPermResponse) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func init() {
	proto.RegisterType((*HasPermRequest)(nil), "acl.HasPermRequest")
	proto.RegisterType((*HasPermResponse)(nil), "acl.HasPermResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AclService service

type AclServiceClient interface {
	Hasperm(ctx context.Context, in *HasPermRequest, opts ...grpc.CallOption) (*HasPermResponse, error)
}

type aclServiceClient struct {
	cc *grpc.ClientConn
}

func NewAclServiceClient(cc *grpc.ClientConn) AclServiceClient {
	return &aclServiceClient{cc}
}

func (c *aclServiceClient) Hasperm(ctx context.Context, in *HasPermRequest, opts ...grpc.CallOption) (*HasPermResponse, error) {
	out := new(HasPermResponse)
	err := grpc.Invoke(ctx, "/acl.AclService/Hasperm", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AclService service

type AclServiceServer interface {
	Hasperm(context.Context, *HasPermRequest) (*HasPermResponse, error)
}

func RegisterAclServiceServer(s *grpc.Server, srv AclServiceServer) {
	s.RegisterService(&_AclService_serviceDesc, srv)
}

func _AclService_Hasperm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasPermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServiceServer).Hasperm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acl.AclService/Hasperm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServiceServer).Hasperm(ctx, req.(*HasPermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AclService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "acl.AclService",
	HandlerType: (*AclServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hasperm",
			Handler:    _AclService_Hasperm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "acl.proto",
}

func init() { proto.RegisterFile("acl.proto", fileDescriptorAcl) }

var fileDescriptorAcl = []byte{
	// 229 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x90, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0xad, 0x95, 0x26, 0x9d, 0x83, 0xc2, 0x2a, 0x18, 0x7b, 0x2a, 0x39, 0x79, 0x4a, 0x40,
	0xc1, 0x8b, 0x27, 0x45, 0xa1, 0x17, 0x41, 0xe2, 0xad, 0x97, 0x32, 0x19, 0x86, 0xa4, 0xb0, 0x9b,
	0x5d, 0x67, 0xb2, 0x7e, 0x7e, 0xe9, 0xf6, 0x0f, 0xf4, 0x36, 0xef, 0x31, 0xfc, 0xde, 0x9b, 0x81,
	0x39, 0x92, 0xad, 0x82, 0xf8, 0xd1, 0x9b, 0x29, 0x92, 0x2d, 0xd7, 0x70, 0xbd, 0x42, 0xfd, 0x66,
	0x71, 0x0d, 0xff, 0x46, 0xd6, 0xd1, 0x14, 0x90, 0x29, 0xcb, 0xdf, 0x96, 0xb8, 0x98, 0x2c, 0x27,
	0x8f, 0xf3, 0xe6, 0x28, 0x8d, 0x81, 0xab, 0x01, 0x1d, 0x17, 0x97, 0xc9, 0x4e, 0xb3, 0x59, 0x40,
	0x2e, 0xac, 0x3e, 0x0a, 0x71, 0x31, 0x4d, 0xfe, 0x49, 0x97, 0x9f, 0x70, 0x73, 0x62, 0x6b, 0xf0,
	0x83, 0xb2, 0x79, 0x80, 0xbc, 0x47, 0xdd, 0x04, 0x16, 0x97, 0xe8, 0x79, 0x93, 0xf5, 0xfb, 0x15,
	0x73, 0x0f, 0x19, 0x8b, 0x6c, 0x9c, 0x76, 0x87, 0x80, 0x19, 0x8b, 0x7c, 0x69, 0xf7, 0xf4, 0x01,
	0xf0, 0x46, 0xf6, 0xe7, 0x50, 0xe2, 0x05, 0xb2, 0x15, 0xea, 0x0e, 0x60, 0x6e, 0xab, 0xdd, 0x31,
	0xe7, 0xf5, 0x17, 0x77, 0xe7, 0xe6, 0x3e, 0xb7, 0xbc, 0x78, 0x2f, 0xd7, 0xcb, 0x6e, 0x3b, 0xf6,
	0xb1, 0xad, 0xc8, 0xbb, 0xda, 0xf9, 0x68, 0x6b, 0x24, 0x5b, 0x77, 0x3c, 0xd4, 0xa1, 0x7d, 0x45,
	0xb2, 0xa1, 0x6d, 0x67, 0xe9, 0x31, 0xcf, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xaa, 0x75, 0x96,
	0x09, 0x25, 0x01, 0x00, 0x00,
}

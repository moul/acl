// Code generated by protoc-gen-gogo.
// source: acl.proto
// DO NOT EDIT!

/*
Package aclpb is a generated protocol buffer package.

It is generated from these files:
	acl.proto

It has these top-level messages:
	GetTokenRequest
	GetTokenResponse
	HasPermRequest
	HasPermResponse
	AddTokenRequest
	AddTokenResponse
	Token
	Permission
*/
package aclpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GetTokenRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetTokenRequest) Reset()                    { *m = GetTokenRequest{} }
func (m *GetTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTokenRequest) ProtoMessage()               {}
func (*GetTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptorAcl, []int{0} }

func (m *GetTokenRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetTokenResponse struct {
	Token  *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	ErrMsg string `protobuf:"bytes,2,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
}

func (m *GetTokenResponse) Reset()                    { *m = GetTokenResponse{} }
func (m *GetTokenResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTokenResponse) ProtoMessage()               {}
func (*GetTokenResponse) Descriptor() ([]byte, []int) { return fileDescriptorAcl, []int{1} }

func (m *GetTokenResponse) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *GetTokenResponse) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type HasPermRequest struct {
	TokenId  string `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	Service  string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Resource string `protobuf:"bytes,4,opt,name=resource,proto3" json:"resource,omitempty"`
}

func (m *HasPermRequest) Reset()                    { *m = HasPermRequest{} }
func (m *HasPermRequest) String() string            { return proto.CompactTextString(m) }
func (*HasPermRequest) ProtoMessage()               {}
func (*HasPermRequest) Descriptor() ([]byte, []int) { return fileDescriptorAcl, []int{2} }

func (m *HasPermRequest) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *HasPermRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *HasPermRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HasPermRequest) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

type HasPermResponse struct {
	HasPerm bool   `protobuf:"varint,1,opt,name=has_perm,json=hasPerm,proto3" json:"has_perm,omitempty"`
	ErrMsg  string `protobuf:"bytes,2,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
}

func (m *HasPermResponse) Reset()                    { *m = HasPermResponse{} }
func (m *HasPermResponse) String() string            { return proto.CompactTextString(m) }
func (*HasPermResponse) ProtoMessage()               {}
func (*HasPermResponse) Descriptor() ([]byte, []int) { return fileDescriptorAcl, []int{3} }

func (m *HasPermResponse) GetHasPerm() bool {
	if m != nil {
		return m.HasPerm
	}
	return false
}

func (m *HasPermResponse) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type AddTokenRequest struct {
	Token *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *AddTokenRequest) Reset()                    { *m = AddTokenRequest{} }
func (m *AddTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*AddTokenRequest) ProtoMessage()               {}
func (*AddTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptorAcl, []int{4} }

func (m *AddTokenRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

type AddTokenResponse struct {
	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ErrMsg string `protobuf:"bytes,2,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
}

func (m *AddTokenResponse) Reset()                    { *m = AddTokenResponse{} }
func (m *AddTokenResponse) String() string            { return proto.CompactTextString(m) }
func (*AddTokenResponse) ProtoMessage()               {}
func (*AddTokenResponse) Descriptor() ([]byte, []int) { return fileDescriptorAcl, []int{5} }

func (m *AddTokenResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AddTokenResponse) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

// models
type Token struct {
	Id             string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId         string        `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OrganizationId string        `protobuf:"bytes,3,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Permissions    []*Permission `protobuf:"bytes,4,rep,name=permissions" json:"permissions,omitempty"`
	Roles          []string      `protobuf:"bytes,5,rep,name=roles" json:"roles,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptorAcl, []int{6} }

func (m *Token) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Token) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Token) GetOrganizationId() string {
	if m != nil {
		return m.OrganizationId
	}
	return ""
}

func (m *Token) GetPermissions() []*Permission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *Token) GetRoles() []string {
	if m != nil {
		return m.Roles
	}
	return nil
}

type Permission struct {
	Service   string   `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Name      string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Resources []string `protobuf:"bytes,3,rep,name=resources" json:"resources,omitempty"`
}

func (m *Permission) Reset()                    { *m = Permission{} }
func (m *Permission) String() string            { return proto.CompactTextString(m) }
func (*Permission) ProtoMessage()               {}
func (*Permission) Descriptor() ([]byte, []int) { return fileDescriptorAcl, []int{7} }

func (m *Permission) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *Permission) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Permission) GetResources() []string {
	if m != nil {
		return m.Resources
	}
	return nil
}

func init() {
	proto.RegisterType((*GetTokenRequest)(nil), "acl.GetTokenRequest")
	proto.RegisterType((*GetTokenResponse)(nil), "acl.GetTokenResponse")
	proto.RegisterType((*HasPermRequest)(nil), "acl.HasPermRequest")
	proto.RegisterType((*HasPermResponse)(nil), "acl.HasPermResponse")
	proto.RegisterType((*AddTokenRequest)(nil), "acl.AddTokenRequest")
	proto.RegisterType((*AddTokenResponse)(nil), "acl.AddTokenResponse")
	proto.RegisterType((*Token)(nil), "acl.Token")
	proto.RegisterType((*Permission)(nil), "acl.Permission")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AclService service

type AclServiceClient interface {
	GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error)
	AddToken(ctx context.Context, in *AddTokenRequest, opts ...grpc.CallOption) (*AddTokenResponse, error)
	HasPerm(ctx context.Context, in *HasPermRequest, opts ...grpc.CallOption) (*HasPermResponse, error)
}

type aclServiceClient struct {
	cc *grpc.ClientConn
}

func NewAclServiceClient(cc *grpc.ClientConn) AclServiceClient {
	return &aclServiceClient{cc}
}

func (c *aclServiceClient) GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error) {
	out := new(GetTokenResponse)
	err := grpc.Invoke(ctx, "/acl.AclService/GetToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclServiceClient) AddToken(ctx context.Context, in *AddTokenRequest, opts ...grpc.CallOption) (*AddTokenResponse, error) {
	out := new(AddTokenResponse)
	err := grpc.Invoke(ctx, "/acl.AclService/AddToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclServiceClient) HasPerm(ctx context.Context, in *HasPermRequest, opts ...grpc.CallOption) (*HasPermResponse, error) {
	out := new(HasPermResponse)
	err := grpc.Invoke(ctx, "/acl.AclService/HasPerm", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AclService service

type AclServiceServer interface {
	GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error)
	AddToken(context.Context, *AddTokenRequest) (*AddTokenResponse, error)
	HasPerm(context.Context, *HasPermRequest) (*HasPermResponse, error)
}

func RegisterAclServiceServer(s *grpc.Server, srv AclServiceServer) {
	s.RegisterService(&_AclService_serviceDesc, srv)
}

func _AclService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acl.AclService/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServiceServer).GetToken(ctx, req.(*GetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AclService_AddToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServiceServer).AddToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acl.AclService/AddToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServiceServer).AddToken(ctx, req.(*AddTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AclService_HasPerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasPermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServiceServer).HasPerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acl.AclService/HasPerm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServiceServer).HasPerm(ctx, req.(*HasPermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AclService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "acl.AclService",
	HandlerType: (*AclServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _AclService_GetToken_Handler,
		},
		{
			MethodName: "AddToken",
			Handler:    _AclService_AddToken_Handler,
		},
		{
			MethodName: "HasPerm",
			Handler:    _AclService_HasPerm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "acl.proto",
}

func init() { proto.RegisterFile("acl.proto", fileDescriptorAcl) }

var fileDescriptorAcl = []byte{
	// 449 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xad, 0xe3, 0xa4, 0x76, 0x26, 0x52, 0x5c, 0x2d, 0x41, 0xb8, 0x11, 0x07, 0xb3, 0x17, 0x72,
	0x4a, 0x44, 0x2a, 0x21, 0xa1, 0x9e, 0x8a, 0x84, 0x20, 0x87, 0x4a, 0x95, 0xe1, 0x80, 0xb8, 0x44,
	0x9b, 0xf5, 0xc8, 0x59, 0x61, 0x7b, 0xcd, 0xae, 0xcd, 0x81, 0x9f, 0xc3, 0xcf, 0xe0, 0xd7, 0x21,
	0xaf, 0xd7, 0xf9, 0xb0, 0x5a, 0xf5, 0x96, 0x79, 0x99, 0x37, 0x6f, 0xe7, 0xbd, 0x31, 0x8c, 0x19,
	0xcf, 0x96, 0xa5, 0x92, 0x95, 0x24, 0x2e, 0xe3, 0x19, 0x7d, 0x03, 0xc1, 0x67, 0xac, 0xbe, 0xc9,
	0x9f, 0x58, 0xc4, 0xf8, 0xab, 0x46, 0x5d, 0x91, 0x29, 0x0c, 0x44, 0x12, 0x3a, 0x91, 0xb3, 0x18,
	0xc7, 0x03, 0x91, 0xd0, 0x7b, 0xb8, 0x3a, 0xb6, 0xe8, 0x52, 0x16, 0x1a, 0x49, 0x04, 0xa3, 0xaa,
	0x01, 0x4c, 0xdb, 0x64, 0x0d, 0xcb, 0x66, 0x6c, 0xdb, 0xd2, 0xfe, 0x41, 0x5e, 0x81, 0x87, 0x4a,
	0x6d, 0x73, 0x9d, 0x86, 0x03, 0x33, 0xea, 0x12, 0x95, 0xba, 0xd7, 0x29, 0xad, 0x61, 0xfa, 0x85,
	0xe9, 0x07, 0x54, 0x79, 0x27, 0x78, 0x0d, 0xbe, 0xe1, 0x6c, 0x0f, 0xb2, 0x9e, 0xa9, 0x37, 0x09,
	0x09, 0xc1, 0xd3, 0xa8, 0x7e, 0x0b, 0x8e, 0x76, 0x4a, 0x57, 0x12, 0x02, 0xc3, 0x82, 0xe5, 0x18,
	0xba, 0x06, 0x36, 0xbf, 0xc9, 0x1c, 0x7c, 0x85, 0x5a, 0xd6, 0x8a, 0x63, 0x38, 0x34, 0xf8, 0xa1,
	0xa6, 0x9f, 0x20, 0x38, 0xc8, 0xda, 0x25, 0xae, 0xc1, 0xdf, 0x33, 0xbd, 0x2d, 0x51, 0xe5, 0x46,
	0xd7, 0x8f, 0xbd, 0x7d, 0xdb, 0xf2, 0xf4, 0xeb, 0x6f, 0x20, 0xb8, 0x4b, 0x92, 0x33, 0xbf, 0x9e,
	0xf5, 0x82, 0xde, 0xc2, 0xd5, 0x91, 0x64, 0xc5, 0x7b, 0x2e, 0x3f, 0xad, 0xf8, 0xd7, 0x81, 0x91,
	0xa1, 0x3e, 0x46, 0xa9, 0x35, 0xaa, 0xc6, 0x36, 0x4b, 0x69, 0xca, 0x4d, 0x42, 0xde, 0x42, 0x20,
	0x55, 0xca, 0x0a, 0xf1, 0x87, 0x55, 0x42, 0x1a, 0x5f, 0x5b, 0x9b, 0xa6, 0xa7, 0xf0, 0x26, 0x21,
	0xef, 0x60, 0xd2, 0x6c, 0x2f, 0xb4, 0x16, 0xb2, 0xd0, 0xe1, 0x30, 0x72, 0x17, 0x93, 0x75, 0x60,
	0x16, 0x78, 0x38, 0xe0, 0xf1, 0x69, 0x0f, 0x99, 0xc1, 0x48, 0xc9, 0x0c, 0x75, 0x38, 0x8a, 0xdc,
	0xc5, 0x38, 0x6e, 0x0b, 0xfa, 0x1d, 0xe0, 0x48, 0x38, 0x4d, 0xcd, 0x79, 0x3c, 0xb5, 0xc1, 0x49,
	0x6a, 0xaf, 0x61, 0xdc, 0xa5, 0xa4, 0x43, 0xd7, 0x4c, 0x3d, 0x02, 0xeb, 0x7f, 0x0e, 0xc0, 0x1d,
	0xcf, 0xbe, 0xda, 0x01, 0x1f, 0xc0, 0xef, 0x8e, 0x91, 0xcc, 0xcc, 0x43, 0x7b, 0xe7, 0x3b, 0x7f,
	0xd9, 0x43, 0x5b, 0xbf, 0xe9, 0x45, 0x43, 0xed, 0x52, 0xb0, 0xd4, 0x5e, 0x92, 0x96, 0xda, 0x8f,
	0x8a, 0x5e, 0x90, 0xf7, 0xe0, 0xd9, 0xe3, 0x21, 0x2f, 0x4c, 0xcf, 0xf9, 0x05, 0xcf, 0x67, 0xe7,
	0x60, 0xc7, 0xfb, 0x48, 0x7f, 0x44, 0xa9, 0xa8, 0xf6, 0xf5, 0x6e, 0xc9, 0x65, 0xbe, 0xca, 0x65,
	0x9d, 0xad, 0x18, 0xcf, 0x56, 0x29, 0x16, 0xab, 0x72, 0x77, 0xcb, 0x78, 0x56, 0xee, 0x76, 0x97,
	0xe6, 0x6b, 0xbc, 0xf9, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x1b, 0xbd, 0xc7, 0x20, 0x9a, 0x03, 0x00,
	0x00,
}

package {{.File.Package}}_grpctransport

{{$file := .File}}

import (
        "fmt"

	context "golang.org/x/net/context"
        pb "{{cat .GoPWD "/" .DestinationDir | nospace | clean}}/pb"
        endpoints "{{cat .GoPWD "/" .DestinationDir | nospace | clean}}/endpoints"
	grpctransport "github.com/go-kit/kit/transport/grpc"
)

// avoid import errors
var _ = fmt.Errorf

func MakeGRPCServer(ctx context.Context, endpoints endpoints.Endpoints) pb.{{.File.Package | title}}ServiceServer {
	options := []grpctransport.ServerOption{}
	return &grpcServer{
		{{range .Service.Method}}
                {{if not .ServerStreaming}}
                {{if not .ClientStreaming}}
		{{.Name | lower}}: grpctransport.NewServer(
			ctx,
			endpoints.{{.Name}}Endpoint,
			decode{{.Name}}Request,
			encode{{.Name}}Response,
			options...,
		),
                {{end}}
		{{end}}
                {{end}}
	}
}

type grpcServer struct {
	{{range .Service.Method}}
	{{.Name | lower}} grpctransport.Handler
	{{end}}
}

{{range .Service.Method}}
func (s *grpcServer) {{.Name}}(ctx context.Context, req *pb.{{.InputType | splitArray "." | last}}) (*pb.{{.OutputType | splitArray "." | last}}, error) {
	_, rep, err := s.{{.Name | lower}}.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.{{.OutputType | splitArray "." | last}}), nil
}

func decode{{.Name}}Request(ctx context.Context, grpcReq interface{}) (interface{}, error) {
	return grpcReq, nil
}

func encode{{.Name}}Response(ctx context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.{{.OutputType | splitArray "." | last}})
	return resp, nil
}
{{end}}
